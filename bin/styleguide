#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var q = require('q');
var formatter = require('format-json');
var pkg = require('../package.json');
var stdin = process.stdin;
var stdout = process.stdout;

var config = {
  categories: [
    {
      name: 'undefined',
      id: 0
    }
  ],

  scrapeUrls: [],
  sassResources: [],
  jsResources: [],
  resolutions: {}
}

var parseCategories = function () {
  var deferred = q.defer();

  stdout.write('Enter categories to create delimited by comma: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();
    var categories = data.split(',');
    
    for (var index = 0, len = categories.length; index < len; index++) {
      if ( categories[index] !== null && categories[index] !== 'null' && categories[index].length > 1 ) {
        var category = {
          name: categories[index].trim(),
          id: index + 1
        }
        config.categories.push(category);
      }
    }
    deferred.resolve();
  });

  return deferred.promise;
};

var parseScrapeUrl = function () {
  var deferred = q.defer();

  stdout.write('Enter URL to scrape snippets from, if left blank, we\'ll continue to next step: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();
    
    if ( data !== null && data !== 'null' && data.length > 0 ) {
      config.scrapeUrls.push(data);
      parseScrapeUrl().then(function () {
        deferred.resolve();
      });
    } else {
      deferred.resolve();
      return deferred.promise;
    }
  });
  return deferred.promise;
};

var parseSassResources = function () {
  var deferred = q.defer();

  stdout.write('Enter relative path from main project directory to SASS file, if left blank, we\'ll continue to next step: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();
    
    if ( data !== null && data !== 'null' && data.length > 0 ) {
      config.sassResources.push(data);
      parseSassResources().then(function () {
        deferred.resolve();
      });
    } else {
      deferred.resolve();
      return deferred.promise;
    }
  });
  return deferred.promise;
};

var parseJsResources = function () {
  var deferred = q.defer();

  stdout.write('Enter relative path from domain root to JS file, if left blank, we\'ll continue to next step: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();
    
    if ( data !== null && data !== 'null' && data.length > 0 ) {
      config.jsResources.push(data);
      parseJsResources().then(function () {
        deferred.resolve();
      });
    } else {
      deferred.resolve();
      return deferred.promise;
    }
  });
  return deferred.promise;
};

var parseMaxIterations = function () {
  var deferred = q.defer();

  stdout.write('Enter maximum iterations through SASS variables before exiting: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    config.maxSassIterations = Number(data);
    deferred.resolve();

  });

  return deferred.promise;
};

var parseSnippetTemplate = function () {
  var deferred = q.defer();

  stdout.write('Enter relative path from your project root directory to snippet template (optional): ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    config.snippetTemplate = data;
    deferred.resolve();
  });

  return deferred.promise;
};

var parseServerPort = function () {
  var deferred = q.defer();

  stdout.write('Enter PORT on which Styleguide app server should run: ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    config.serverPort = Number(data);
    deferred.resolve();
  });

  return deferred.promise;
};

var parseDesktopResolution = function () {
  var deferred = q.defer();

  stdout.write('Enter desktop width in which snippets will be displayed by default (if left blank will be set to 1200): ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    if ( data.length > 0 ) {
      config.resolutions.desktop = Number(data);
    } else {
      config.resolutions.desktop = 1200;
    }
    
    deferred.resolve();
  });

  return deferred.promise;
};

var parseTabletResolution = function () {
  var deferred = q.defer();

  stdout.write('Enter tablet width which you will be able to trigger presing a button (if left blank will be set to 768): ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    if ( data.length > 0 ) {
      config.resolutions.tablet = Number(data);
    } else {
      config.resolutions.tablet = 768;
    }
    
    deferred.resolve();
  });

  return deferred.promise;
};

var parseMobileResolution = function () {
  var deferred = q.defer();

  stdout.write('Enter mobile width which you will be able to trigger presing a button (if left blank will be set to 480): ');

  stdin.once('data', function (data) {
    data = data.toString().trim();

    if ( data.length > 0 ) {
      config.resolutions.mobile = Number(data);
    } else {
      config.resolutions.mobile = 480;
    }
    
    deferred.resolve();
  });

  return deferred.promise;
};

var generate = function (options) {
  var stdin = process.stdin,
      stdout = process.stdout,
      currentFolder = process.cwd(),
      rootFolder = currentFolder + '\\styleguide\\',
      dbFolder = rootFolder + '\\db',
      templateFolder = currentFolder + '\\node_modules\\devbridge-styleguide\\templates\\',
      currentContents,
      javascripts;

  if ( !fs.existsSync(dbFolder) ) {
    fs.mkdirSync(rootFolder);
    fs.mkdirSync(dbFolder);
    fs.mkdirSync(rootFolder + '\\css');
    fs.mkdirSync(rootFolder + '\\js');

    currentContents = fs.readFileSync(templateFolder + 'index.html', 'utf-8');

    fs.writeFileSync(rootFolder + '\\index.html', currentContents);

    currentContents = fs.readFileSync(templateFolder + 'css\\main.css', 'utf-8');

    fs.writeFileSync(rootFolder + '\\css\\main.css', currentContents);

    javascripts = fs.readdirSync(templateFolder + 'js');

    for (var index = 0, len = javascripts.length; index < len; index++) {
      currentContents = fs.readFileSync(templateFolder + '\\js\\' + javascripts[index], 'utf-8');
      fs.writeFileSync(rootFolder + '\\js\\' + javascripts[index], currentContents);
    }
  }
  
  stdin.resume();

  parseCategories()
    .then(parseScrapeUrl)
    .then(parseSassResources)
    .then(parseMaxIterations)
    .then(parseSnippetTemplate)
    .then(parseJsResources)
    .then(parseServerPort)
    .then(parseDesktopResolution)
    .then(parseTabletResolution)
    .then(parseMobileResolution)
    .then(function () {
      stdout.write('Press Enter to write out the following configuration to your project root directory:\n')
      console.log(config);
      stdin.once('data', function () {
        
        for (var index = 0, len = config.categories.length; index < len; index++) {
          fs.writeFileSync(dbFolder + '\\' + config.categories[index].name + '.txt', formatter.plain([]));
        }
        
        fs.writeFileSync(dbFolder + '\\' + 'uniques.txt', formatter.plain([]));
        fs.writeFileSync(dbFolder + '\\' + 'sassdata.txt', formatter.plain([]));
        fs.writeFileSync(process.cwd() + '\\styleguide_config.txt', formatter.plain(config));
        
        process.exit(0);
      });
    });
  
};

program
  .version(pkg.version)
  .description(pkg.description)
  .usage('<command>');

program
  .command('generate-config')
  .description('generate configuration file in working directory')
  .action(generate);

program.parse(process.argv);
